const raw = require("raw-socket");
const ip = require('ip');

// ############################## IP ##############################
// IP: only checksum, src ip, dst ip can be changed.
// let ipBuffer = Buffer.from([
//     0x45,                   // IP: Version (0x45 is IPv4)
//     0x00,                   // IP: Differentiated Services Field
//     0x00,0x3c,              // IP: Total Length
//     0x00,0x01,              // IP: Identification
//     0x40,                   // IP: Flags (0x20 Don't Fragment)
//     0x00,                   // IP: Fragment Offset
//     0x40,                   // IP: TTL (0x40 is 64)
//     0x06,                   // IP: protocol (ICMP=1, IGMP=2, TCP=6, U1=17, static value)
//     0x00,0x00,              // IP: checksum for IP part of this packet
//     0x00,0x00,0x00,0x00,    // IP: ip src
//     0x00,0x00,0x00,0x00,    // IP: ip dst
// ]);

const ipBuffers = {
    "T2": Buffer.from([0x45, 0x00, 0x00, 0x3c, 0x59, 0x5a, 0x40, 0x00, 0x30, 0x06, 0xf3, 0x5f, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01]),
    "T3": Buffer.from([0x45, 0x00, 0x00, 0x3c, 0x6c, 0x09, 0x00, 0x00, 0x2d, 0x06, 0x23, 0xb1, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01]),
    "T4": Buffer.from([0x45, 0x00, 0x00, 0x3c, 0xff, 0xdb, 0x40, 0x00, 0x36, 0x06, 0x46, 0xde, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01]),
    "T5": Buffer.from([0x45, 0x00, 0x00, 0x3c, 0x19, 0xc5, 0x00, 0x00, 0x36, 0x06, 0x6c, 0xf5, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01]),
    "T6": Buffer.from([0x45, 0x00, 0x00, 0x3c, 0xf9, 0x31, 0x40, 0x00, 0x26, 0x06, 0x5d, 0x88, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01]),
    "T7": Buffer.from([0x45, 0x00, 0x00, 0x3c, 0xcc, 0xf8, 0x00, 0x00, 0x31, 0x06, 0xbe, 0xc1, 0x7f, 0x00, 0x00, 0x01, 0x7f, 0x00, 0x00, 0x01]),
    "IE1": Buffer.from([0x45, 0x00, 0x00, 0x94, 0x9c, 0x08, 0x40, 0x00, 0x2c, 0x01, 0x10, 0xcd, 0xc0, 0xa8, 0x00, 0x67, 0x27, 0x6a, 0xb9, 0x1a]),
    "IE2": Buffer.from([0x45, 0x04, 0x00, 0xb2, 0xdf, 0xa2, 0x00, 0x00, 0x35, 0x01, 0x04, 0x11, 0xc0, 0xa8, 0x00, 0x67, 0x27, 0x6a, 0xb9, 0x1a]),
    "ECN": Buffer.from([0x45, 0x00, 0x00, 0x34, 0x4b, 0x7a, 0x00, 0x00, 0x25, 0x06, 0xa8, 0xb6, 0xc0, 0xa8, 0x00, 0x67, 0x27, 0x6a, 0xb9, 0x1a]),
    "SEQ1": Buffer.from([0x45, 0x00, 0x00, 0x3c, 0xe1, 0xc7, 0x00, 0x00, 0x3a, 0x06, 0xfd, 0x60, 0xc0, 0xa8, 0x00, 0x67, 0x27, 0x6a, 0xb9, 0x1a]),
    "SEQ2": Buffer.from([0x45, 0x00, 0x00, 0x3c, 0xda, 0x08, 0x00, 0x00, 0x30, 0x06, 0x0f, 0x20, 0xc0, 0xa8, 0x00, 0x67, 0x27, 0x6a, 0xb9, 0x1a]),
    "SEQ3": Buffer.from([0x45, 0x00, 0x00, 0x3c, 0xc0, 0xdf, 0x00, 0x00, 0x37, 0x06, 0x21, 0x49, 0xc0, 0xa8, 0x00, 0x67, 0x27, 0x6a, 0xb9, 0x1a]),
    "SEQ4": Buffer.from([0x45, 0x00, 0x00, 0x38, 0xfb, 0x43, 0x00, 0x00, 0x33, 0x06, 0xea, 0xe8, 0xc0, 0xa8, 0x00, 0x67, 0x27, 0x6a, 0xb9, 0x1a]),
    "SEQ5": Buffer.from([0x45, 0x00, 0x00, 0x3c, 0x5f, 0xba, 0x00, 0x00, 0x3a, 0x06, 0x7f, 0x6e, 0xc0, 0xa8, 0x00, 0x67, 0x27, 0x6a, 0xb9, 0x1a]),
    "SEQ6": Buffer.from([0x45, 0x00, 0x00, 0x38, 0x90, 0x5b, 0x00, 0x00, 0x38, 0x06, 0x50, 0xd1, 0xc0, 0xa8, 0x00, 0x67, 0x27, 0x6a, 0xb9, 0x1a]),
    "U1": Buffer.from([0x45, 0x00, 0x01, 0x48, 0x10, 0x42, 0x00, 0x00, 0x3a, 0x11, 0xcd, 0xcf, 0xc0, 0xa8, 0x00, 0x67, 0x27, 0x6a, 0xb9, 0x1a]),
};

// ############################## TCP #############################
// TCP: only src port, dst port, header length, checksum will be changed.
// let tcpBuffer = new Buffer([
//     0x00,0x00,              // TCP: src port (should be random)
//     0x00,0x00,              // TCP: dst port (should be the port you want to scan)
//     0x00,0x00,0x00,0x00,    // TCP: sequence number (should be random)
//     0x00,0x00,0x00,0x00,    // TCP: acquitment number (must be null because WE are intiating the SYN, static value)
//     0x00,0x02,              // TCP: header length (data offset) && flags (fin=1,syn=2,rst=4,psh=8,ack=16,urg=32, static value)
//     0x72,0x10,              // TCP: window
//     0x00,0x00,              // TCP: checksum for TCP part of this packet)
//     0x00,0x00,              // TCP: ptr urgent
//     0x02,0x04,              // TCP: options
//     0x05,0xb4,              // TCP: padding (mss=1460, static value)
//     0x04,0x02,              // TCP: SACK Permitted (4) Option
//     0x08,0x0a,              // TCP: TSval, Length
//         0x01,0x75,0xdd,0xe8,// value
//         0x00,0x00,0x00,0x00,// TSecr
//     0x01,                   // TCP: NOP
//     0x03,0x03,0x07          // TCP: Window scale
// ]);
const tcpBuffers = {
    "T2": Buffer.from([0xd6, 0xc1, 0x04, 0x38, 0x0c, 0x8b, 0x3f, 0x0c, 0xd4, 0x9b, 0x37, 0xb0, 0xa0, 0x00, 0x00, 0x80, 0x12, 0x54, 0x00, 0x00,
        0x03, 0x03, 0x0a, 0x01, 0x02, 0x04, 0x01, 0x09, 0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02]),
    "T3": Buffer.from([0xd6, 0xc2, 0x04, 0x38, 0x0c, 0x8b, 0x3f, 0x0c, 0xd4, 0x9b, 0x37, 0xb0, 0xa0, 0x2b, 0x01, 0x00, 0x11, 0xa8, 0x00, 0x00,
        0x03, 0x03, 0x0a, 0x01, 0x02, 0x04, 0x01, 0x09, 0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02]),
    "T4": Buffer.from([0xd6, 0xc3, 0x04, 0x38, 0x0c, 0x8b, 0x3f, 0x0c, 0xd4, 0x9b, 0x37, 0xb0, 0xa0, 0x10, 0x04, 0x00, 0x0e, 0xc2, 0x00, 0x00,
        0x03, 0x03, 0x0a, 0x01, 0x02, 0x04, 0x01, 0x09, 0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02]),
    "T5": Buffer.from([0xd6, 0xc4, 0x8a, 0x39, 0x0c, 0x8b, 0x3f, 0x0c, 0xd4, 0x9b, 0x37, 0xb0, 0xa0, 0x02, 0x7a, 0x69, 0x12, 0x64, 0x00, 0x00,
        0x03, 0x03, 0x0a, 0x01, 0x02, 0x04, 0x01, 0x09, 0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02]),
    "T6": Buffer.from([0xd6, 0xc5, 0x8a, 0x39, 0x0c, 0x8b, 0x3f, 0x0c, 0xd4, 0x9b, 0x37, 0xb0, 0xa0, 0x10, 0x80, 0x00, 0x0c, 0xbe, 0x00, 0x00,
        0x03, 0x03, 0x0a, 0x01, 0x02, 0x04, 0x01, 0x09, 0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02]),
    "T7": Buffer.from([0xd6, 0xc6, 0x8a, 0x39, 0x0c, 0x8b, 0x3f, 0x0c, 0xd4, 0x9b, 0x37, 0xb0, 0xa0, 0x29, 0xff, 0xff, 0x87, 0xa4, 0x00, 0x00,
        0x03, 0x03, 0x0f, 0x01, 0x02, 0x04, 0x01, 0x09, 0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02]),
    "ECN": Buffer.from([0x9e, 0xc3, 0x00, 0x50, 0xd6, 0xe3, 0x73, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x88, 0xc2, 0x00, 0x03, 0xda, 0x63, 0xf7, 0xf5,
        0x03, 0x03, 0x0a, 0x01, 0x02, 0x04, 0x05, 0xb4, 0x04, 0x02, 0x01, 0x01]),
    "SEQ1": Buffer.from([0x9e, 0xc9, 0x00, 0x50, 0x3b, 0xe8, 0x18, 0x9e, 0x55, 0xce, 0x5d, 0x85, 0xa0, 0x02, 0x00, 0x01, 0xf6, 0x7d, 0x00, 0x00,
        0x03, 0x03, 0x0a, 0x01, 0x02, 0x04, 0x05, 0xb4, 0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x04, 0x02]),
    "SEQ2": Buffer.from([0x97, 0x22, 0x00, 0x50, 0xe5, 0xe8, 0x64, 0x31, 0x9b, 0x89, 0xce, 0x24, 0xa0, 0x02, 0x00, 0x3f, 0x5c, 0x35, 0x00, 0x00,
        0x02, 0x04, 0x05, 0x78, 0x03, 0x03, 0x00, 0x04, 0x02, 0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00]),
    "SEQ3": Buffer.from([0x97, 0x23, 0x00, 0x50, 0xe5, 0xe8, 0x64, 0x32, 0x9b, 0x89, 0xce, 0x24, 0xa0, 0x02, 0x00, 0x04, 0x5d, 0x66, 0x00, 0x00,
        0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x05, 0x01, 0x02, 0x04, 0x02, 0x80]),
    "SEQ4": Buffer.from([0x97, 0x24, 0x00, 0x50, 0xe5, 0xe8, 0x64, 0x33, 0x9b, 0x89, 0xce, 0x24, 0x90, 0x02, 0x00, 0x04, 0x69, 0xec, 0x00, 0x00,
        0x04, 0x02, 0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0a, 0x00]),
    "SEQ5": Buffer.from([0x97, 0x25, 0x00, 0x50, 0xe5, 0xe8, 0x64, 0x34, 0x9b, 0x89, 0xce, 0x24, 0xa0, 0x02, 0x00, 0x10, 0x55, 0xbe, 0x00, 0x00,
        0x02, 0x04, 0x02, 0x18, 0x04, 0x02, 0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x03, 0x03, 0x0a, 0x00]),
    "SEQ6": Buffer.from([0x9e, 0xce, 0x00, 0x50, 0x3b, 0xe8, 0x18, 0xa3, 0x55, 0xce, 0x5d, 0x85, 0x90, 0x02, 0x02, 0x00, 0x16, 0x28, 0x00, 0x00,
        0x02, 0x04, 0x01, 0x09, 0x04, 0x02, 0x08, 0x0a, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00]),
};

const icmpBuffers = {
    "IE1": Buffer.from([0x08, 0x09, 0x8e, 0xe8, 0x67, 0xe7, 0x01, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
    "IE2": Buffer.from([0x08, 0x00, 0x8e, 0xef, 0x67, 0xe8, 0x01, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]),
};

const udpBuffers = {
    "U1": Buffer.from([0x92, 0x25, 0xad, 0xde, 0x01, 0x34, 0xb2, 0x84, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
        0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43]),
}

// use it as an abstract class.
class Probe {
    // use it as a protect method.
    constructor(type, name, ipBuffer) {
        this.type = type;
        this.name = name;
        this.ipBuffer = ipBuffer;
    }

    getIpLength() {
        return (this.ipBuffer[2] << 8) + this.ipBuffer[3];
    }
}

class IcmpProbe extends Probe {
    // use it as a private method.
    constructor(name, ipBuffer, icmpBuffer) {
        super("ICMP", name, ipBuffer);
        this.icmpBuffer = icmpBuffer;
    }

    static fromIcmpName(name) {
        return new IcmpProbe(name, ipBuffers[name], icmpBuffers[name]);
    }

    getIcmpCode() {
        return this.icmpBuffer[1];
    }

    getTotalIcmpBuffer(srcIp, dstIp) {
        // IP
        let ipBuffer = this.ipBuffer;
        ip.toBuffer(srcIp, ipBuffer, 12);
        ip.toBuffer(dstIp, ipBuffer, 16);
        raw.writeChecksum(ipBuffer, 10, raw.createChecksum(ipBuffer));

        return Buffer.concat([ipBuffer, this.icmpBuffer]);
    }

}

class TcpProbe extends Probe {
    // use it as a private method.
    constructor(name, ipBuffer, tcpBuffer, portOpening, port = null) {
        super("TCP", name, ipBuffer);
        this.tcpBuffer = tcpBuffer;
        this.portOpening = portOpening;
        this.port = port;
    }

    static fromTcpName(name, portOpening) {
        return new TcpProbe(name, ipBuffers[name], tcpBuffers[name], portOpening);
    }

    setPort(port) {
        this.port = port;
        return this;
    }

    getTcpAck() {
        return (BigInt(this.tcpBuffer[8]) << 24n) + (BigInt(this.tcpBuffer[9]) << 16n) +
            (BigInt(this.tcpBuffer[10]) << 8n) + BigInt(this.tcpBuffer[11]);
    }

    getTcpSeq() {
        return (BigInt(this.tcpBuffer[4]) << 24n) + (BigInt(this.tcpBuffer[5]) << 16n) +
            (BigInt(this.tcpBuffer[6]) << 8n) + BigInt(this.tcpBuffer[7]);
    }

    getTotalTcpBuffer(srcIp, srcPort, dstIp) {
        // IP
        let ipBuffer = this.ipBuffer;
        ip.toBuffer(srcIp, ipBuffer, 12);
        ip.toBuffer(dstIp, ipBuffer, 16);
        raw.writeChecksum(ipBuffer, 10, raw.createChecksum(ipBuffer));

        // TCP
        let tcpBuffer = this.tcpBuffer;
        tcpBuffer.writeUInt8(tcpBuffer.length << 2, 12);
        tcpBuffer.writeUInt16BE(srcPort, 0);
        tcpBuffer.writeUInt16BE(this.port, 2);
        tcpBuffer.writeUInt16BE(0, 16);

        // pseudoBuffer, to calculate tcp checksum.
        let pseudoBuffer = Buffer.from([
            0x00,0x00,0x00,0x00,    // IP: ip src
            0x00,0x00,0x00,0x00,    // IP: ip dst
            0x00,
            0x06,                   // IP: protocol (ICMP=1, IGMP=2, TCP=6, U1=17)
            (tcpBuffer.length >> 8) & 0xff, tcpBuffer.length & 0xff
        ]);
        ip.toBuffer(srcIp, pseudoBuffer, 0);
        ip.toBuffer(dstIp, pseudoBuffer, 4);
        raw.writeChecksum(tcpBuffer, 16, raw.createChecksum(Buffer.concat([pseudoBuffer, tcpBuffer])));

        return Buffer.concat([ipBuffer, tcpBuffer]);
    }
}

class UdpProbe extends Probe {
    // use it as a private method.
    constructor(name, ipBuffer, udpBuffer, portOpening, port = null) {
        super("U1", name, ipBuffer);
        this.udpBuffer = udpBuffer;
        this.portOpening = portOpening;
        this.port = port;
    }

    static fromUdpName(name, portOpening) {
        return new UdpProbe(name, ipBuffers[name], udpBuffers[name], portOpening);
    }

    setPort(port) {
        this.port = port;
        return this;
    }

    getTotalUdpBuffer(srcIp, srcPort, dstIp) {
        // IP
        let ipBuffer = this.ipBuffer;
        ip.toBuffer(srcIp, ipBuffer, 12);
        ip.toBuffer(dstIp, ipBuffer, 16);
        raw.writeChecksum(ipBuffer, 10, raw.createChecksum(ipBuffer));

        // U1
        let udpBuffer = this.udpBuffer;
        udpBuffer.writeUInt16BE(srcPort, 0);
        udpBuffer.writeUInt16BE(this.port, 2);
        udpBuffer.writeUInt16BE(udpBuffer.length, 4);

        return Buffer.concat([ipBuffer, udpBuffer]);
    }
}

const probes = {
    "T2": TcpProbe.fromTcpName('T2', true),
    "T3": TcpProbe.fromTcpName('T3', true),
    "T4": TcpProbe.fromTcpName('T4', true),
    "T5": TcpProbe.fromTcpName('T5', false),
    "T6": TcpProbe.fromTcpName('T6', false),
    "T7": TcpProbe.fromTcpName('T7', false),
    "IE1": IcmpProbe.fromIcmpName('IE1'),
    "IE2": IcmpProbe.fromIcmpName('IE2'),
    "ECN": TcpProbe.fromTcpName('ECN', true),
    "SEQ1": TcpProbe.fromTcpName('SEQ1', true),
    "SEQ2": TcpProbe.fromTcpName('SEQ2', true),
    "SEQ3": TcpProbe.fromTcpName('SEQ3', true),
    "SEQ4": TcpProbe.fromTcpName('SEQ4', true),
    "SEQ5": TcpProbe.fromTcpName('SEQ5', true),
    "SEQ6": TcpProbe.fromTcpName('SEQ6', true),
    "U1": UdpProbe.fromUdpName('U1', false),
};

const setPort = ([opening, closed]) => {
    console.log(`opening: ${opening}, closed: ${closed}`);
    for (const name of Object.keys(probes)) {
        const probe = probes[name];
        if (!(probe instanceof TcpProbe || probe instanceof UdpProbe)) continue;

        if (probe.portOpening)
            probes[name] = probe.setPort(opening);
        else
            probes[name] = probe.setPort(closed);
    }
    return probes;
};

module.exports = {
    setPort: setPort,
    TcpProbe: TcpProbe,
    IcmpProbe: IcmpProbe,
    UdpProbe: UdpProbe
}
